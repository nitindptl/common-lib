{"version":3,"file":"common-lib.js.map","sources":["ng://common-lib/lib/data-table/data-table.component.ts","ng://common-lib/lib/data-table/pager.component.ts","ng://common-lib/lib/common-material.module.ts","ng://common-lib/lib/data-grid/data-table-datasource.ts","ng://common-lib/lib/data-grid/data-grid.component.ts","ng://common-lib/lib/common-lib.module.ts","ng://common-lib/lib/service/http.service.ts","ng://common-lib/lib/global-error-handler.service.ts"],"sourcesContent":["import { Component, OnInit, ViewChild, Input } from '@angular/core';\nimport { MatPaginator, MatSort } from '@angular/material';\n\n@Component({\n  selector: 'lib-data-table',\n  template: `<div class=\"mat-elevation-z8 example-container\">\n              <table mat-table #table [dataSource]=\"dataSource\" matSort>\n                <ng-container *ngFor=\"let disCol of displayedColumns;\" matColumnDef=\"{{disCol}}\">\n                  <th #header mat-header-cell mat-sort-header *matHeaderCellDef> {{disCol}} </th>\n                  <td mat-cell *matCellDef=\"let element\"> {{element[disCol]}} </td>\n                </ng-container>\n                <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n              </table>\n              <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\n            </div>`\n})\nexport class DataTableComponent implements OnInit {\n  \n  dataSource: any[];\n  displayedColumns: Array<string>;\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n  \n  constructor() { }\n\n  ngOnInit() { }\n\n  @Input() set data(_data: any[]) {\n    this.displayedColumns = Object.keys(_data[0]);\n    this.dataSource = _data;\n  }\n\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator, MatTableDataSource } from '@angular/material';\n\n@Component({\n  selector: 'lib-pager',\n  template: `<p>Pager works</p>`\n})\nexport class PagerComponent implements OnInit {\n\nconstructor() { }\n\nngOnInit() {\n}\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  MatSidenavModule,\n  MatToolbarModule,\n  MatIconModule,\n  MatListModule,\n  MatCardModule,\n  MatButtonModule,\n  MatTableModule,\n  MatDialogModule,\n  MatInputModule,\n  MatSelectModule,\n  MatPaginatorModule,\n  MatSortModule,\n  MatCheckboxModule,\n  MatAutocompleteModule,\n  MatDatepickerModule,\n  MatFormFieldModule,\n  MatRadioModule,\n  MatSliderModule,\n  MatSlideToggleModule,\n  MatMenuModule,\n  MatGridListModule,\n  MatStepperModule,\n  MatTabsModule,\n  MatExpansionModule,\n  MatButtonToggleModule,\n  MatChipsModule,\n  MatProgressSpinnerModule,\n  MatProgressBarModule,\n  MatTooltipModule,\n  MatSnackBarModule,\n  MatNativeDateModule,\n} from '@angular/material';\nimport { CdkTableModule } from '@angular/cdk/table';\n@NgModule({\n  imports: [\n    CommonModule,\n    CdkTableModule,\n    MatCheckboxModule,\n    MatCheckboxModule,\n    MatButtonModule,\n    MatInputModule,\n    MatAutocompleteModule,\n    MatDatepickerModule,\n    MatFormFieldModule,\n    MatRadioModule,\n    MatSelectModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatMenuModule,\n    MatSidenavModule,\n    MatToolbarModule,\n    MatListModule,\n    MatGridListModule,\n    MatCardModule,\n    MatStepperModule,\n    MatTabsModule,\n    MatExpansionModule,\n    MatButtonToggleModule,\n    MatChipsModule,\n    MatIconModule,\n    MatProgressSpinnerModule,\n    MatProgressBarModule,\n    MatDialogModule,\n    MatTooltipModule,\n    MatSnackBarModule,\n    MatTableModule,\n    MatSortModule,\n    MatPaginatorModule\n  ],\n  exports: [\n    CommonModule,\n    CdkTableModule,\n    MatCheckboxModule,\n    MatCheckboxModule,\n    MatButtonModule,\n    MatInputModule,\n    MatAutocompleteModule,\n    MatDatepickerModule,\n    MatFormFieldModule,\n    MatRadioModule,\n    MatSelectModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatMenuModule,\n    MatSidenavModule,\n    MatToolbarModule,\n    MatListModule,\n    MatGridListModule,\n    MatCardModule,\n    MatStepperModule,\n    MatTabsModule,\n    MatExpansionModule,\n    MatButtonToggleModule,\n    MatChipsModule,\n    MatIconModule,\n    MatProgressSpinnerModule,\n    MatProgressBarModule,\n    MatDialogModule,\n    MatTooltipModule,\n    MatSnackBarModule,\n    MatTableModule,\n    MatSortModule,\n    MatPaginatorModule,\n    MatNativeDateModule\n  ],\n  declarations: []\n})\nexport class CommonMaterialModule { }\n","import { DataSource } from '@angular/cdk/collections';\nimport { MatPaginator, MatSort } from '@angular/material';\nimport { map } from 'rxjs/operators';\nimport { Observable, of as observableOf, merge } from 'rxjs';\n\n// TODO: Replace this with your own data model type\nexport interface DataTableItem {\n  name: string;\n  id: number;\n}\n\n\n/**\n * Data source for the DataTable view. This class should\n * encapsulate all logic for fetching and manipulating the displayed data\n * (including sorting, pagination, and filtering).\n */\nexport class DataTableDataSource extends DataSource<any> {\n  public data: any[];\n  constructor(private paginator: MatPaginator, private _data: any[],private sort: MatSort) {\n    super();\n    this.data = _data;\n  }\n\n  /**\n   * Connect this data source to the table. The table will only update when\n   * the returned stream emits new items.\n   * @returns A stream of the items to be rendered.\n   */\n  connect(): Observable<any[]> {\n    // Combine everything that affects the rendered data into one update\n    // stream for the data-table to consume.\n    const dataMutations = [\n      observableOf(this.data),\n      this.paginator.page,\n      this.sort.sortChange\n    ];\n\n    // Set the paginators length\n    this.paginator.length = this.data.length;\n\n    return merge(...dataMutations).pipe(map(() => {\n      return this.getPagedData(this.getSortedData([...this.data]));\n    }));\n  }\n\n  /**\n   *  Called when the table is being destroyed. Use this function, to clean up\n   * any open connections or free any held resources that were set up during connect.\n   */\n  disconnect() {}\n\n  /**\n   * Paginate the data (client-side). If you're using server-side pagination,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getPagedData(data: DataTableItem[]) {\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Sort the data (client-side). If you're using server-side sorting,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getSortedData(data: DataTableItem[]) {\n    if (!this.sort.active || this.sort.direction === '') {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      const isAsc = this.sort.direction === 'asc';\n      switch (this.sort.active) {\n        case 'name': return compare(a.name, b.name, isAsc);\n        case 'id': return compare(+a.id, +b.id, isAsc);\n        default: return 0;\n      }\n    });\n  }\n}\n\n/** Simple sort comparator for example ID/Name columns (for client-side sorting). */\nfunction compare(a, b, isAsc) {\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild, ElementRef, Renderer } from '@angular/core';\nimport { MatPaginator, MatSort } from '@angular/material';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DataTableDataSource } from './data-table-datasource';\n\n@Component({\n  selector: 'lib-data-grid',\n  template: `<div class=\"mat-elevation-z8\">\n  <div class=\"example-container\">\n    <table  mat-table #table [dataSource]=\"dataSource\" matSort aria-label=\"Elements\">\n      \n      <ng-container [matColumnDef]=\"cols.field\" *ngFor=\"let cols of displayedColumns\" >\n          <ng-container *ngIf=\"cols.title=='check'\">\n              <th mat-header-cell *matHeaderCellDef  [ngClass]=\"{'mat-table-sticky':cols.freez}\">\n                <mat-checkbox (change)=\"$event ? masterToggle() : null\"\n                              [checked]=\"selection.hasValue() && isAllSelected()\"\n                              [indeterminate]=\"selection.hasValue() && !isAllSelected()\">\n                </mat-checkbox>\n              </th>\n              <td mat-cell  mat-cell *matCellDef=\"let row\" [ngClass]=\"{'mat-table-sticky':cols.freez}\">\n                <mat-checkbox (click)=\"$event.stopPropagation()\"\n                              (change)=\"$event ? isSelected(row) : null\"\n                              [checked]=\"selection.isSelected(row)\">\n                </mat-checkbox>\n              </td>\n            </ng-container>\n        <th #header mat-header-cell *matHeaderCellDef mat-sort-header sticky [ngClass]=\"{'mat-table-sticky':cols.freez}\"> {{cols.title}} <span \n          class = \"ui-column-resizer\" \n          (mousedown) = \"onMouseDown($event)\">\n       </span></th>\n        <td mat-cell *matCellDef=\"let element\" [ngClass]=\"{'mat-table-sticky':cols.freez}\"> {{element[cols.field]}} </td>\n      </ng-container>\n      <tr mat-header-row *matHeaderRowDef=\"dataFileds\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: dataFileds;\">\n      </tr>\n    </table>\n  </div>\n    <mat-paginator #paginator\n      [length]=\"dataSource.data.length\"\n      [pageIndex]=\"0\"\n      [pageSize]=\"50\"\n      [pageSizeOptions]=\"[5, 10, 20, 40]\">\n    </mat-paginator>\n  </div>`\n})\nexport class DataGridComponent implements OnInit {\n  ngOnInit() {\n  }\n\n  dataFileds :any;\n  start : Element;\n  startX : number;\n  pressed : boolean;\n  startWidth :number;\n  @Input() set data(_data: any[]) {\n    this.dataSource = new DataTableDataSource(this.paginator, _data, this.sort);\n  }\n  @Input() set id(id: any) { }\n  @Input() set columns(_columns: any[]) {\n    var header =[];\n    var fileds = [];\n   _columns.forEach(element => {\n      header.push(element);\n      fileds.push(element.field);\n    });\n    this.displayedColumns = header;\n    this.dataFileds = fileds;\n  }\n\n  @Output() selectAll : EventEmitter<any> = new EventEmitter();\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n  dataSource: DataTableDataSource;\n\n  /** Columns displayed in the table. Columns IDs can be added, removed, or reordered. */\n  displayedColumns: Array<string>;\n  selection = new SelectionModel<any>(true,[]);\n\n\n  constructor(private hCell :ElementRef,public renderer: Renderer) {\n    \n  }\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected == numRows;\n  }\n  \n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    this.isAllSelected() ?\n        this.selection.clear() :\n        this.dataSource.data.forEach(row => this.selection.select(row));\n        console.log(this.selection)\n        this.selectAll.emit(null);\n  }\n  isSelected(row) {\n    this.selection.toggle(row);\n    console.log(row)\n  }\n\n  onMouseDown(event){\n    this.start = event.target;\n    this.pressed = true;\n    this.startX = event.x;\n    //console.log(event.target.offsetParent.cellIndex)\n   // console.log(this.hCell.nativeElement.querySelector(\"thead>tr\").children[2])\n    this.startWidth = event.target.offsetParent.offsetWidth;\n    this.initResizableColumns();\n  }\n\n  initResizableColumns() {\n   this.renderer.listenGlobal('body', 'mousemove', (event) => {\n       if(this.pressed) {\n          let width = this.startWidth + (event.x - this.startX);\n          let index = event.target.offsetParent.cellIndex;\n          let colHeaderEle = this.hCell.nativeElement.querySelector(\"thead>tr\").children[index];\n          colHeaderEle.style.width = width+'px';\n          let colDataEle = this.hCell.nativeElement.querySelector(\"tbody>tr\").children[index];\n          colDataEle.style.width = width+'px';\n       }\n    });\n    this.renderer.listenGlobal('body', 'mouseup', (event) => {\n    if(this.pressed) {\n        this.pressed = false;\n    }\n  });\n}\n}\n","import { NgModule, ErrorHandler } from '@angular/core';\nimport { DataTableComponent } from './data-table/data-table.component';\nimport { PagerComponent } from './data-table/pager.component';\nimport { CommonMaterialModule } from './common-material.module';\nimport { HttpClientModule } from '@angular/common/http';\nimport { DataGridComponent } from './data-grid/data-grid.component';\n\n@NgModule({\n  imports: [\n    CommonMaterialModule,\n    HttpClientModule\n  ],\n  declarations: [\n    DataTableComponent, \n    PagerComponent,\n    DataGridComponent\n  ],\n  exports: [ \n    DataTableComponent, \n    PagerComponent, \n    DataGridComponent,\n    CommonMaterialModule\n  ]\n})\nexport class CommonLibModule { }\n","import { Injectable,Injector } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Http } from '@angular/http';\r\nimport { Observable} from 'rxjs';\r\n//import { IGlobals } from './IGlobal.interface';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HttpService {\r\n  private _url: string ;\r\n  private baseUrl: string = \"http://localhost:8081/\";\r\n\r\n  constructor(private _http : HttpClient) {\r\n  }\r\n\r\n  get procurantContext(): any {\r\n   //this.baseUrl = this.globalConfig.baseApiUrl_Procurant;\r\n    return this.getContext();\r\n  };\r\n\r\n  getContext() {\r\n    let context = {\r\n      url: this.url.bind(this),\r\n      addParam: this.addParam.bind(this),\r\n      get: this.get.bind(this),\r\n      post: this.post.bind(this),\r\n      put: this.put.bind(this),\r\n      delete: this.delete.bind(this)\r\n    }\r\n    return context;\r\n  }\r\n\r\n  private createHeader(contentType?: string) {\r\n    let headers = new HttpHeaders();\r\n    headers.append('Content-Type', contentType ? contentType : 'application/json');\r\n    return headers;\r\n  }\r\n\r\n  private url(url: string) {\r\n    this._url = this.baseUrl + url;\r\n    return this;\r\n  }\r\n\r\n\r\n  private addParam(key: string, value: string | number): HttpService {\r\n    if (value != undefined) {\r\n      if (this._url.indexOf(\"?\") >= 0)\r\n        this._url += \"&\" + key + \"=\" + value;\r\n      else\r\n        this._url += \"?\" + key + \"=\" + value;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  private get(contentType?: string) {\r\n    let headers = this.createHeader(contentType);\r\n    if (this._url) {\r\n      return this._http.get(this._url, {\r\n        headers: headers\r\n      });\r\n    }\r\n  }\r\n\r\n  private post(data, contentType?: string) {\r\n    let headers = this.createHeader(contentType);\r\n    if (this._url) {\r\n      return this._http.post(this._url, data, {\r\n        headers: headers\r\n      });\r\n    }\r\n  }\r\n\r\n  private put(data, contentType?: string) {\r\n    let headers = this.createHeader(contentType);\r\n    if (this._url) {\r\n      return this._http.put(this._url, data, {\r\n        headers: headers\r\n      });\r\n    }\r\n  }\r\n\r\n  private delete(contentType?: string) {\r\n    let headers = this.createHeader(contentType);\r\n    if (this._url) {\r\n      return this._http.delete(this._url, {\r\n        headers: headers\r\n      });\r\n    }\r\n  }\r\n\r\n  private setBaseUrl(url) {\r\n    this.baseUrl = url;\r\n  }\r\n\r\n  private getBaseUrl() {\r\n    return this.baseUrl;\r\n  }\r\n\r\n}","import { Injectable, ErrorHandler, Injector } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable()\r\nexport class GlobalErrorHandlerService implements ErrorHandler {\r\n    constructor(private injector: Injector) { }    \r\n\r\n    handleError(error: any) {\r\n      let router = this.injector.get(Router);\r\n      console.log('URL: ' + router.url);\r\n      \r\n      if (error instanceof HttpErrorResponse) {\r\n          //Backend returns unsuccessful response codes such as 404, 500 etc.\t\t\t\t  \r\n          console.error('Backend returned status code: ', error.status);\r\n          console.error('Response body:', error.message);          \t  \r\n      } else {\r\n          //A client-side or network error occurred.\t          \r\n          console.error('An error occurred:', error.message);          \r\n      }     \r\n      router.navigate(['/error']);\r\n    }\r\n} "],"names":["tslib_1.__extends","observableOf"],"mappings":"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"}
